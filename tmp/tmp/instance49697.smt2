;test regex val a #:: b #:: c #:: _ = """([a-z]){1}""".r.findAllIn("a b c").toStream
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "v") (re.++ (str.to_re "a") (re.++ (str.to_re "l") (re.++ (str.to_re " ") (re.++ (str.to_re "a") (re.++ (str.to_re " ") (re.++ (str.to_re "#") (re.++ (str.to_re ":") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (str.to_re "b") (re.++ (str.to_re " ") (re.++ (str.to_re "#") (re.++ (str.to_re ":") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (str.to_re "c") (re.++ (str.to_re " ") (re.++ (str.to_re "#") (re.++ (str.to_re ":") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (str.to_re "_") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "\u{22}") (re.++ ((_ re.loop 1 1) (re.range "a" "z")) (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "\u{22}") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "r") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "f") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "d") (re.++ (str.to_re "A") (re.++ (str.to_re "l") (re.++ (str.to_re "l") (re.++ (str.to_re "I") (re.++ (str.to_re "n") (re.++ (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "a") (re.++ (str.to_re " ") (re.++ (str.to_re "b") (re.++ (str.to_re " ") (re.++ (str.to_re "c") (str.to_re "\u{22}"))))))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "t") (re.++ (str.to_re "o") (re.++ (str.to_re "S") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "a") (str.to_re "m")))))))))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 20 (str.len X)))
(check-sat)
(get-model)