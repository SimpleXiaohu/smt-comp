;test regex amountValue.replace(/^(\d+)[,.](\d{3})[.,](\d{2})$/,'$1' + '$2' +'.'+'$3').replace(/^(\d+),(\d{2})$/,'$1' +'.'+'$2');
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "a") (re.++ (str.to_re "m") (re.++ (str.to_re "o") (re.++ (str.to_re "u") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "V") (re.++ (str.to_re "a") (re.++ (str.to_re "l") (re.++ (str.to_re "u") (re.++ (str.to_re "e") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "p") (re.++ (str.to_re "l") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "e") (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "/") (re.++ (str.to_re "") (re.++ (re.+ (re.range "0" "9")) (re.++ (re.union (str.to_re ",") (str.to_re ".")) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.++ (re.union (str.to_re ".") (str.to_re ",")) ((_ re.loop 2 2) (re.range "0" "9")))))))) (re.++ (str.to_re "") (str.to_re "/"))) (re.++ (str.to_re ",") (str.to_re "\u{27}"))) (re.++ (str.to_re "") (re.++ (str.to_re "1") (re.++ (str.to_re "\u{27}") (re.++ (re.+ (str.to_re " ")) (re.++ (str.to_re " ") (str.to_re "\u{27}"))))))) (re.++ (str.to_re "") (re.++ (str.to_re "2") (re.++ (str.to_re "\u{27}") (re.++ (re.+ (str.to_re " ")) (re.++ (str.to_re "\u{27}") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.+ (str.to_re "\u{27}")) (str.to_re "\u{27}"))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "3") (str.to_re "\u{27}")))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "p") (re.++ (str.to_re "l") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "e") (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "/") (re.++ (str.to_re "") (re.+ (re.range "0" "9")))) (re.++ (str.to_re ",") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (str.to_re "") (str.to_re "/"))) (re.++ (str.to_re ",") (str.to_re "\u{27}"))) (re.++ (str.to_re "") (re.++ (str.to_re "1") (re.++ (str.to_re "\u{27}") (re.++ (re.+ (str.to_re " ")) (re.++ (str.to_re "\u{27}") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.+ (str.to_re "\u{27}")) (str.to_re "\u{27}"))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "2") (str.to_re "\u{27}")))) (str.to_re ";"))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 20 (str.len X)))
(check-sat)
(get-model)