;test regex ~m/>(@ARGV)<\/.*\n(<td.*\n*.*\/td>\n){3}<td(.*\n*.*\n*)<\/td>/
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "~") (re.++ (str.to_re "m") (re.++ (str.to_re "/") (re.++ (str.to_re ">") (re.++ (re.++ (str.to_re "@") (re.++ (str.to_re "A") (re.++ (str.to_re "R") (re.++ (str.to_re "G") (str.to_re "V"))))) (re.++ (str.to_re "<") (re.++ (str.to_re "/") (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "\u{0a}") (re.++ ((_ re.loop 3 3) (re.++ (str.to_re "<") (re.++ (str.to_re "t") (re.++ (str.to_re "d") (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.* (str.to_re "\u{0a}")) (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "/") (re.++ (str.to_re "t") (re.++ (str.to_re "d") (re.++ (str.to_re ">") (str.to_re "\u{0a}")))))))))))) (re.++ (str.to_re "<") (re.++ (str.to_re "t") (re.++ (str.to_re "d") (re.++ (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.* (str.to_re "\u{0a}")) (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.* (str.to_re "\u{0a}"))))) (re.++ (str.to_re "<") (re.++ (str.to_re "/") (re.++ (str.to_re "t") (re.++ (str.to_re "d") (re.++ (str.to_re ">") (str.to_re "/"))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 20 (str.len X)))
(check-sat)
(get-model)